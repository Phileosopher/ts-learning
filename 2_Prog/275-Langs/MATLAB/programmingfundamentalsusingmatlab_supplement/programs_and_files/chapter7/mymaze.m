% Programming Fundamentals Using MATLAB, Michael Weeks Copyright 2020
% 
%
% Define a crude maze, and solve it through
% recursion.
%

% define the maze.
% Use # for walls, @ for goal.
maze = [ ...
    %         1         2         3         4
    '########################################'; ...
    '#           # #                        #'; ...
    '####### ##### # ###################### #'; ...
    '#             # #                    # #'; ...
    '# ############# #### ############### ###'; ...
    '#                  # #         #       #'; ...
    '##### ############## # ##### ### #######'; ...
    '#                        #     #       #'; ...
    '# #################################### #'; ...
    '#     #        #                       #'; ...
    '##### ##### ####### ####################'; ...
    '#           #       #      #           #'; ...
    '################ ####### ### ######### #'; ...
    '#           #                          #'; ...
    '###### ###### ######################## #'; ...
    '#                                @ #   #'; ...
    '########################################']; 

% initialize starting row and column
row = 2;
col = 2;

maze_solver(maze, row, col);

% 
% maze2 = [ ...
%     '######'; ...
%     '#    #'; ...
%     '#### #'; ...
%     '####@#'; ...
%     '######'];
% row = 2;
% col = 2;
% 
% maze_solver(maze2, row, col);

% maze3 = [ ...
%     '######'; ...
%     '#    #'; ...
%     '# ## #'; ...
%     '#   @#'; ...
%     '######'];
% row = 2;
% col = 2;
% 
% maze_solver(maze3, row, col);

