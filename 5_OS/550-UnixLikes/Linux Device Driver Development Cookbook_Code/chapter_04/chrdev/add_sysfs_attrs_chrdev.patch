diff --git a/chapter_4/chrdev/chrdev.c b/chapter_4/chrdev/chrdev.c
index c9db2b6..2cb6a54 100644
--- a/chapter_4/chrdev/chrdev.c
+++ b/chapter_4/chrdev/chrdev.c
@@ -19,6 +19,78 @@ static struct class *chrdev_class;
 
 struct chrdev_device chrdev_array[MAX_DEVICES];
 
+/*
+ * sysfs methods
+ */
+
+static ssize_t id_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct chrdev_device *chrdev = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", chrdev->id);
+}
+static DEVICE_ATTR_RO(id);
+
+static ssize_t reset_to_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t count)
+{
+	struct chrdev_device *chrdev = dev_get_drvdata(dev);
+
+	if (count > BUF_LEN)
+		count = BUF_LEN;
+	memcpy(chrdev->buf, buf, count);
+
+	return count;
+}
+static DEVICE_ATTR_WO(reset_to);
+
+static ssize_t read_only_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct chrdev_device *chrdev = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", chrdev->read_only);
+}
+
+static ssize_t read_only_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t count)
+{
+	struct chrdev_device *chrdev = dev_get_drvdata(dev);
+	int data, ret;
+
+	ret = sscanf(buf, "%d", &data);
+	if (ret != 1)
+		return -EINVAL;
+
+	chrdev->read_only = !!data;
+
+	return count;
+}
+static DEVICE_ATTR_RW(read_only);
+
+/*
+ * Class attributes
+ */
+
+static struct attribute *chrdev_attrs[] = {
+	&dev_attr_id.attr,
+	&dev_attr_reset_to.attr,
+	&dev_attr_read_only.attr,
+	NULL,
+};
+
+static const struct attribute_group chrdev_group = {
+	.attrs = chrdev_attrs,
+};
+
+static const struct attribute_group *chrdev_groups[] = {
+	&chrdev_group,
+	NULL,
+};
+
 /*
  * Methods
  */
@@ -216,6 +288,7 @@ static int __init chrdev_init(void)
 		pr_err("chrdev: failed to allocate class\n");
 		return -ENOMEM;
 	}
+	chrdev_class->dev_groups = chrdev_groups;
 
 	/* Allocate a region for character devices */
 	ret = alloc_chrdev_region(&chrdev_devt, 0, MAX_DEVICES, "chrdev");
